buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
plugins {
    // Add the shadowjar plugin for fat jars, kotlin plugin for kotlin
    // and the maven-publish plugin to publish shadowjar to jitpack/maven
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = 'git rev-parse HEAD'.execute().text.substring(0, 10) // git hash
group = "org.valkyrienskies.addon"
archivesBaseName = "vs-world"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

// Create shade configuration to indicate to shadow
// which dependencies should be shaded
configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    // The mod depends on Valkyrien Skies
    deobfCompile("org.valkyrienskies:Valkyrien-Skies:4ceb3621") {
        transitive = false
    }
    shade "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72"
}

// region SHADOW

shadowJar {
    classifier = null // No -all classifier
    // All 'shade' dependencies should be put in the fat jar
    configurations = [project.configurations.shade]
    // Relocate all kotlin related libraries so as not to interfere with
    // other mods that might use kotlin
    relocate 'kotlin', 'org.valkyrienskies.addons.world.deps.kotlin'
    relocate 'jetbrains', 'org.valkyrienskies.addons.world.deps.jetbrains'
    relocate 'org.jetbrains', 'org.valkyrienskies.addons.world.deps.org.jetbrains'
    relocate 'intellij', 'org.valkyrienskies.addons.world.deps.intellij'
    relocate 'org.intellij', 'org.valkyrienskies.addons.world.deps.org.intellij'
    mergeServiceFiles() // https://github.com/johnrengelman/shadow/issues/304
}

reobf {
    shadowJar{}
}

// https://forums.spongepowered.org/t/mcp-reobfuscation-doesnt-work/21779
tasks.shadowJar.finalizedBy reobfShadowJar


reobf.jar {
    mappingType = "SEARGE"
    classpath = sourceSets.main.compileClasspath
}

// endregion

jar {
    classifier = "unshaded"
    manifest.attributes(
            "FMLAT": "vs_world_at.cfg"
    )
}

publishing {
    repositories {
        def ghpUser = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
        def ghpPassword = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        if (ghpUser != null && ghpPassword != null) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ValkyrienSkies/vs-world")
                credentials {
                    username = ghpUser
                    password = ghpPassword
                }
            }
        }

    }
    publications {
        maven(MavenPublication) {
            groupId = "org.valkyrienskies.addon"
            artifactId = "vs-world"
            version = project.version

            from components.java
            // Publish shadowjar
            artifact shadowJar
            // Publish source jar
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
